import numpy as np
from pylatex import *
from pylatex.utils import italic
import os
from pathlib import Path
from datetime import datetime
import subprocess
import quantities as pq

CanoeDetailDataDict = [500, 1000, 2000, True, False]

UserInput = [{"0": [36.0, 24.0, 12.0, 10.0, 0.95, 0.25], "1": [120.0, 24.0, 12.0, 10.0, 0.0, 0.0], "2": [36.0, 24.0, 12.0, 10.0, 0.25, 0.25], "Name": "121123", "Config_Count": 28}, [36.0, 115.0, 0.75, 600.0]]

report_path = str(Path("..//..//asset//DesignReport"))
#Generate the report in PDF with LaTex format
doc = Document(default_filepath=report_path)
doc.packages.append(Package('geometry', options=['tmargin=1cm']))
def canoeScaleGenerate(UserInput):
    with doc.create(Subsection('Canoe Scale Specification')):
        thickness = UserInput[1][2]
        totalLength = 2*thickness # Thickness of the canoe
        for index in range(len(UserInput[0])-2):
            totalLength += UserInput[0][f"{index}"][0]
        doc.append(f'Canoe Total Length: {totalLength} Inch')
        sectionLabelList = ["Front Section", "Middle Section", "Back Section", "Other Specs"]
        labelList = ["Canoe Length", "Canoe Width", "Canoe Depth",
                     "Cross-Section Shape factor", "Length-to-Width Shape factor",
                     "Length-to-Depth Shape factor"]
        for sectionIndex, sectionLabel in enumerate(sectionLabelList):
            with doc.create(Subsubsection(sectionLabel)):
                with doc.create(Tabular('|l|l|')) as table:
                    if(sectionIndex <=2):
                        table.add_hline()
                        for index, label in enumerate(labelList):
                            text = f'{UserInput[0][f"{sectionIndex}"][index]}'
                            if (index <= 2): text = f'{UserInput[0][f"{sectionIndex}"][index]+thickness} Inch'
                            if (index == 1): text = f'{UserInput[0][f"{sectionIndex}"][index]+thickness * 2} Inch'
                            table.add_row((label, text))
                            table.add_hline()
                    else:
                        specialLabelList = ["Concrete Density", "Concrete Thickness", "Crew Weight"]
                        table.add_hline()
                        for index, label in enumerate(specialLabelList):
                            text = f'{UserInput[1][index+1]}'
                            if index == 1: text += " Cubic Feet/lb"
                            if index == 2: text += " Inch"
                            if index == 3: text += " lbs"
                            table.add_row((label, text))
                            table.add_hline()

def canoeDataGenerate(CanoeDetailDataDict):
    with doc.create(Subsection('Canoe Data Specification')):
        labelList = [["Canoe Volume", "Cubic Inch"], ["Canoe Buoyancy", pq.newton], ["Canoe Weight", pq.pound],
                     ["Canoe Flow Test Boolean", ""], ["Canoe Submerge Test Boolean", ""]]
        with doc.create(Tabular('|l|l|')) as table:
            table.add_hline()
            for index, label in enumerate(labelList):
                if (type(label[1]) != str):
                    data = CanoeDetailDataDict[index]*label[1]

                    table.add_row((label[0], data.rescale(label[1])))
                else:
                    table.add_row((label[0], f'{CanoeDetailDataDict[index]} {label[1]}'))

                table.add_hline()

def canoeDetailedDataGenerate():
    return 42 # TODO: Implement this function

with doc.create(Section('Canoe Design Report')):
    doc.append(f'This report is automatically generated by the Canoe Design Program at {datetime.now()}')
    doc.append(f"\nThe Design Serial Number is: ")
    doc.append(italic(f'{UserInput[0]["Name"]}'))
    doc.append('\nThe data specification of Canoe and calculation process are shown below:')
    canoeScaleGenerate(UserInput)
    canoeDataGenerate(CanoeDetailDataDict)

















p = Path("temp/")
p.mkdir(parents=True, exist_ok=True)
doc.generate_pdf(filepath="temp/full",compiler="pdflatex", clean=True)





