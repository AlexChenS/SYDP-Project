import numpy as np
from pylatex import *
from pylatex.utils import *
from pathlib import Path
from datetime import datetime
import quantities as pq
from pdflatex import PDFLaTeX



CanoeDataDict = {'Volume': 47646.93440082646, 'Buoyancy': 7628.819636711514, 'Weight': 376.73272587379495, 'Flow': True,
                 'Submerge': True}

CanoeDetailDataDict = {'Hull Type': 'Three Body', 'Hull Property': 'Asymmetric',
                       'Hull subProperty': 'Asymmetric_Constant Hull',
                       'Unit': ['inch', 'cubic inch', 'lbs', 'newton', 'square inch'],
                       'Surface Area': [7614.150708532861, 'sq in'],
                       'Surface Area by Sections': [1097.9679228792036, 5210.59584818956, 1305.586937464098, 'sq in'],
                       'Volume_Outside': [4937.33, 35468.18, 7241.42, 'cu in'],
                       'Volume_Inside': [4284.3, 31418.18, 6283.64, 'cu in'], 'Volume_Styrofoam': [10567.93, 'cu in'],
                       'Volume_Concrete': [5660.82, 'cu in'], 'WaterLine': [0, 'inch'], 'Canoe Weight': [376.73, 'lbs'],
                       'Total Weight': [976.73, 'lbs'], 'Buoyancy': [7628.82, 'N'], 'Buoyancy_Submerge': [2598.41, 'N'],
                       'Capability': [1716.4844182600907, 'lbs'], 'Capability_Submerge': [584.6420401692103, 'lbs'],
                       'FlowTest': 'Pass', 'SubmergeTest': 'Pass'}

UserInput = [{"0": [36.0, 24.0, 12.0, 10.0, 0.95, 0.25], "1": [120.0, 24.0, 12.0, 10.0, 0.0, 0.0],
              "2": [36.0, 24.0, 12.0, 10.0, 0.25, 0.25], "Name": "121123", "Config_Count": 28},
             [36.0, 115.0, 0.75, 600.0]]

report_path = str(Path("..//..//asset//DesignReport"))
# Generate the report in PDF with LaTex format

# -------------Main Property----------------
geometry_options = {"margin": "0.7in"}
doc = Document(geometry_options=geometry_options)

# Font Style
doc.append(pylatex.Command('selectfont'))
doc.append(pylatex.Command('fontsize', arguments = ['12', '15']))

#doc.packages.append(Package('geometry', options=['tmargin=1cm', ]))
doc.packages.append(Package('amsmath'))
CanoeDataDict = list(CanoeDataDict.values())

# ---------------Header---------------------
# Add document header
header = PageStyle("fancy")
# Create right header
with header.create(Head("R")):
    header.append(simple_page_number())
with header.create(Head("L")):
    header.append(f'Design Serial Number: {UserInput[0]["Name"]}')
doc.preamble.append(header)
doc.change_document_style("fancy")
# ---------------Header---------------------

# ---------------Title----------------
doc.preamble.append(Command('title', f'Canoe Design Report'))
doc.preamble.append(Command('author', f'automatically generated by Canoe Design Program'))
doc.preamble.append(Command('date', datetime.now()))
doc.append(NoEscape(r'\maketitle'))
doc.change_page_style("fancy")
# ---------------Title----------------------


# -------------Main Property----------------





def CalculationReprot(UserInput, CanoeDataDict, CanoeDetailDataDict, formula_list):
    with doc.create(Section("Canoe Calculation Process")):
        doc.append("Canoe Design Program automize multiples process of Calculation, including: ")
        with doc.create(Itemize()) as itemize:
            itemize.add_item(NoEscape(r"Volume of \textbf{Canoe}, \textbf{Concrete}, \textbf{Styrofoam}"))
            itemize.add_item("Surface Area")
            itemize.add_item("Weight")
            itemize.add_item("Buoyancy")
            itemize.add_item("Capability")
        doc.append("Calculation Method, Formula and Process are as follows: ")
        calculationMedthodGenerate()
        formulalistGenerate(UserInput,CanoeDetailDataDict)
        OtherCalculation(UserInput,CanoeDataDict,CanoeDetailDataDict)

def calculationMedthodGenerate():

    with doc.create(Subsection("Calculation Method")):
        doc.append("The Hull Design Team mainly applied Calculus in the calculation process. Including following concepst:")
        with doc.create(Itemize()) as itemize:
            itemize.add_item("Calculus")
            itemize.add_item("Integration")
            itemize.add_item("Differential Equation")

        with doc.create(Subsubsection("Explanation")):
            doc.append(
                NoEscape(r"Integration of function is the process of finding the area under the curve of a function, "
                         r"which is donated by \eqref{X}. "))
            doc.append(
                NoEscape(r"And the Area of CrossSection is donated by:"))
            doc.append(Command("begin", "align"))
            doc.append(NoEscape(r"Define:A &\equiv CrossSection Shape factor\notag\\"))
            doc.append(NoEscape(
                r"Area &=Width\times Depth - \int_0^{Width} (Depth\times(\frac{x}{Width})^{A} \mathrm{d}x\label{A}\\"))
            doc.append(NoEscape(r"Area &=Width\times Depth - \frac{Width\times Depth}{A + 1}\notag\\"))
            doc.append(NoEscape(r"Area &=\frac{A\times Width\times Depth}{A + 1}\tag{\ref{A}{a}}"))
            doc.append(Command("end", "align"))
            doc.append(NoEscape(r"Where $a$ is the shape factor of the cross section."))

            doc.append(NoEscape(r"We know the Width and Depth is governed by Length as \eqref{Y} and \eqref{Z}."))
            doc.append("Thus, the Length-Aspect Volumn Formula is the Area under the curve of CrossSection Area Function. Donated by: ")
            doc.append(Command("begin", "align"))
            doc.append(NoEscape(r"Define: B &\equiv Length to Width Shape factor\notag\\"))
            doc.append(NoEscape(r"Define: C &\equiv Length to Depth Shape factor\notag\\"))
            doc.append(NoEscape(r"Volume &=2\times \displaystyle\sum_{i=0}^{Length} \frac{A\times Width(i) \times Depth(i)}{A+1}\notag\\"))
            doc.append(NoEscape(r"Volume &=2\times \frac{A}{A+1} \int_0^{Length} Width\times(\frac{x}{Length})^{B}\times Depth\times(\frac{x}{Length})^{C} \mathrm{d}x\label{B}"))
            doc.append(Command("end", "align"))

def formulalistGenerate(UserInput, CanoeDetailDataDict):
    thickness = UserInput[1][2]
    with doc.create(Subsection("Formula List")):
        sectionLabelList = ["Front Section Volume Formula", "Middle Section Volume Formula",
                            "Back Section Volume Formula"] \
            if len(UserInput[0]) == 5 else ["Front Section Volume Formula", "Back Section Volume Formula"]
        itemList = ["Length", "Width", "Depth",
                    "A", "B", "C"]
        for sectionIndex, label in enumerate(sectionLabelList):
            formula_specific = r"Volume &=2\times \frac{A}{A+1} \int_0^{Length} Width\times(\frac{x}{Length})^{B}\times Depth\times(\frac{x}{Length})^{C} \mathrm{d}x \notag"
            outside_formula_specific = r"Volume &=2\times \frac{A}{A+1} \int_0^{Length} Width\times(\frac{x}{Length})^{B}\times Depth\times(\frac{x}{Length})^{C} \mathrm{d}x \notag"
            with doc.create(Subsubsection(label)):
                for itemIndex, item in reversed(list(enumerate(itemList))):
                    if item in formula_specific:
                        if item == "Width":
                            formula_specific = formula_specific.replace(item, str(round(
                                UserInput[0][f"{sectionIndex}"][itemIndex] / 2, 2)))
                            outside_formula_specific = outside_formula_specific.replace(item, str(round(
                                UserInput[0][f"{sectionIndex}"][itemIndex] / 2 + thickness, 2)))
                        else:
                            formula_specific = formula_specific.replace(item, str(round(
                                UserInput[0][f"{sectionIndex}"][itemIndex], 2)))
                            if (itemIndex == 0 and sectionIndex == 1 and len(UserInput[0]) == 5):
                                outside_formula_specific = outside_formula_specific.replace(item, str(round(
                                    UserInput[0][f"{sectionIndex}"][itemIndex], 2)))
                            else:
                                outside_formula_specific = outside_formula_specific.replace(item, str(round(
                                    UserInput[0][f"{sectionIndex}"][itemIndex] + thickness, 2)))

                    formula_specific = formula_specific.replace("Volume", "Thickness Exclude: " + str(
                        round(CanoeDetailDataDict["Volume_Inside"][sectionIndex], 2)))
                    outside_formula_specific = outside_formula_specific.replace("Volume", "Thickness Include: " + str(
                        round(CanoeDetailDataDict["Volume_Outside"][sectionIndex], 2)))

                doc.append(Command("begin", "align"))
                doc.append(NoEscape(formula_specific))
                doc.append(Command("end", "align"))
                doc.append(Command("begin", "align"))
                doc.append(NoEscape(outside_formula_specific))
                doc.append(Command("end", "align"))

def OtherCalculation(UserInput, CanoeDataDict, CanoeDetailDataDict):
    with doc.create(Subsection("Other Calculation")):
        doc.append(NoEscape(r"\textbf{Buoyancy} is donated by: \textbf{AmiArchimedes' principle}"))
        doc.append(Command("begin", "align"))
        doc.append(NoEscape(r"F_{buoyancy} &=\rho_{liquid}\times (\frac{Volume}{61023.744095}) \times g\label{C}"))
        doc.append(Command("end", "align"))
        doc.append(NoEscape(r"\textbf{Weight} is donated by: "))
        doc.append(Command("begin", "align"))
        doc.append(NoEscape(r"Weight_{lbs} &=(\frac{ConcreteVolume_{inch^2}}{1728})\times Density_{feet^3}\label{D}"))
        doc.append(Command("end", "align"))
        doc.append(NoEscape(r"\textbf{Weight-bearing (Capability)} is donated by: "))
        doc.append(Command("begin", "align"))
        doc.append(NoEscape(r"Weight_{lbs} &=(\frac{F_{buoyancy}}{g})\times 2.205 \label{E}"))
        doc.append(Command("end", "align"))

        doc.append(NoEscape(r"\textbf{Predicate} for Floating Test is donated by: "))
        doc.append(Command("begin", "align"))
        doc.append(NoEscape(r"Result &= \forall x\in Capability_{lbs}, \forall y\in TotalWeight_{lbs} (Pass Floating Test \implies x \geq y) \label{E}"))
        doc.append(Command("end", "align"))

        doc.append(NoEscape(r"\textbf{Predicate} for Submerging Test is donated by: "))
        doc.append(Command("begin", "align"))
        doc.append(NoEscape(
            r"Result &= \forall x\in SubmergeCapability_{lbs}, \forall y\in Weight_{lbs} (Pass Submerging Test \implies x \geq y) \label{F}"))
        doc.append(Command("end", "align"))

    with doc.create(Subsubsection("Calculation Detail")):
        physics_formulaList =[r"F_{buoyancy} &=\rho_{liquid}\times (\frac{Volume}{61023.744095}) \times g",
                              r"Weight_{lbs} &=(\frac{ConcreteVolume_{inch^2}}{1728})\times Density_{feet^3}",
                              r"Capability_{lbs} &=(\frac{F_{buoyancy}}{g})\times 2.205",
                              r"Result_{flow} &= \forall x\in Capability_{lbs}, \forall y\in TotalWeight_{lbs} (Pass floating test \implies x \geq y)",
                              r"Result_{submerge} &= \forall x\in SubmergeCapability_{lbs}, \forall y\in Weight_{lbs} (Pass submerging test \implies x \geq y)"]
        doc.append(Command("begin", "align"))
        for index,formula in enumerate(physics_formulaList):
            if("F" in formula):formula=formula.replace("F",str(round(CanoeDataDict[1],2)))
            if("ConcreteVolume" in formula):formula=formula.replace("ConcreteVolume",str(round(CanoeDetailDataDict["Volume_Concrete"][0],2)))
            if("Volume" in formula):formula=formula.replace("Volume",str(round(CanoeDataDict[0],2)))
            if("TotalWeight" in formula):formula=formula.replace("TotalWeight",str(round(CanoeDetailDataDict["Total Weight"][0],2)))
            if("SubmergeCapability" in formula):formula=formula.replace("SubmergeCapability",str(round(CanoeDetailDataDict["Capability_Submerge"][0],2)))
            if("Capability" in formula):formula=formula.replace("Capability",str(round(CanoeDetailDataDict["Capability"][0],2)))
            if("Weight" in formula):formula=formula.replace("Weight",str(round(CanoeDataDict[2],2)))

            if("Density" in formula):formula=formula.replace("Density",str(UserInput[1][1]))
            if("Result_{flow}" in formula):formula=formula.replace("Result_{flow}",str(CanoeDataDict[3])+"_{flow}")
            if("Result_{submerge}" in formula):formula=formula.replace("Result_{submerge}",str(CanoeDataDict[4])+"_{submerge}")
            if(index == len(physics_formulaList)-1):
                doc.append(NoEscape(formula +r"\notag"))
            else:
                doc.append(NoEscape(formula +r"\notag" + r"\\"))
        doc.append(Command("end", "align"))





def DesignReport(UserInput, CanoeDataDict, CanoeDetailDataDict):
    with doc.create(Section('Canoe Design and Specification')):
        doc.append("The Canoe Design and Specification Report is as follow: ")
        canoeScaleGenerate(UserInput)
        canoeDataGenerate(CanoeDataDict)
        canoeDetailedDataGenerate(CanoeDetailDataDict)
        formula_list = canoeFormulaGenerate(UserInput)
    return formula_list
def canoeScaleGenerate(UserInput):
    with doc.create(Subsection('Canoe Scale Specification')):
        thickness = UserInput[1][2]
        totalLength = 2 * thickness  # Thickness of the canoe
        for index in range(len(UserInput[0]) - 2):
            totalLength += UserInput[0][f"{index}"][0]
        doc.append(f'Canoe Total Length: {totalLength} Inch')
        sectionLabelList = ["Front Section Scale", "Middle Section Scale", "Back Section Scale", "Other Specs"] \
            if len(UserInput[0]) == 5 else ["Front Section Scale", "Back Section Scale", "Other Specs"]
        labelList = ["Canoe Length", "Canoe Width", "Canoe Depth",
                     "Cross-Section Shape factor", "Length-to-Width Shape factor",
                     "Length-to-Depth Shape factor"]
        for sectionIndex, sectionLabel in enumerate(sectionLabelList):
            with doc.create(Subsubsection(sectionLabel)):
                with doc.create(Tabular('|l|l|',row_height=1.5)) as table:
                    if (sectionIndex <= 2):
                        table.add_hline()
                        for index, label in enumerate(labelList):
                            text = f'{UserInput[0][f"{sectionIndex}"][index]}'
                            if (index <= 2 ): text = f'{UserInput[0][f"{sectionIndex}"][index] + thickness} Inch'
                            if (index == 1): text = f'{UserInput[0][f"{sectionIndex}"][index] + thickness * 2} Inch'
                            table.add_row((label, text))
                            table.add_hline()
                    else:
                        specialLabelList = ["Concrete Density", "Concrete Thickness", "Crew Weight"]
                        table.add_hline()
                        for index, label in enumerate(specialLabelList):
                            text = f'{UserInput[1][index + 1]}'
                            if index == 0: text += " Cubic Feet/lb"
                            if index == 1: text += " Inch"
                            if index == 2: text += " lbs"
                            table.add_row((label, text))
                            table.add_hline()
def canoeDataGenerate(CanoeDataDict):
    with doc.create(Subsection('Canoe Data Specification')):
        labelList = [["Canoe Volume", "Cubic Inch"], ["Canoe Buoyancy", pq.newton], ["Canoe Weight", pq.pound],
                     ["Canoe Flow Test Boolean", ""], ["Canoe Submerge Test Boolean", ""]]
        with doc.create(Tabular('|l|l|')) as table:
            table.add_hline()
            for index, label in enumerate(labelList):
                value = CanoeDataDict[index]
                if type(value) in [int, float]: value = round(value, 4)
                if (type(label[1]) != str):
                    data = value * label[1]

                    table.add_row((label[0], data.rescale(label[1])))
                else:
                    table.add_row((label[0], f'{value} {label[1]}'))

                table.add_hline()
def canoeDetailedDataGenerate(CanoeDetailDataDict):
    with doc.create(Subsection('Canoe Detailed Data')):
        labelList = [["Hull Type", ""], ["Hull Property", ""], ["Hull subProperty", ""],
                     ["Surface Area", "Square Inch"],
                     ["Volume_Styrofoam", "Cubic Inch"], ["Volume_Concrete", "Cubic Inch"], ["Total Weight", pq.pound],
                     ["Buoyancy_Submerge", pq.newton], ["Capability", pq.pound], ["Capability_Submerge", pq.pound]]
        with doc.create(Tabular('|l|l|')) as table:
            table.add_hline()
            for index, label in enumerate(labelList):
                value = CanoeDetailDataDict[label[0]]

                if (type(value) in [list, tuple]): value = value[0]
                if type(value) in [int, float]: value = round(value, 4)
                if (type(label[1]) != str):
                    data = value * label[1]

                    table.add_row(("Canoe " + label[0], data.rescale(label[1])))
                else:
                    table.add_row(("Canoe " + label[0], f'{value} {label[1]}'))

                table.add_hline()
        sectionLabelList = ["Front Section Data", "Middle Section Data", "Back Section Data"] \
            if len(UserInput[0]) == 5 else ["Front Section Data", "Back Section Data"]
        sectionValueLabelList = [["Surface Area by Sections", "Square Inch"], ["Volume_Outside", "Cubic Inch"],
                                 ["Volume_Inside", "Cubic Inch"]]
        sectionValueLabelDict = {"Surface Area by Sections": "SurfaceArea",
                                 "Volume_Outside": "Volume (Thickness Included)",
                                 "Volume_Inside": "Volumes (Thickness Excluded)"}
        for sectionIndex, sectionLabel in enumerate(sectionLabelList):
            with doc.create(Subsubsection(sectionLabel)):
                with doc.create(Tabular('|l|l|')) as table:
                    table.add_hline()
                    for index, label in enumerate(sectionValueLabelList):
                        value = CanoeDetailDataDict[label[0]][sectionIndex]
                        if type(value) in [int, float]: value = round(value, 4)
                        if (type(label[1]) != str):
                            data = value * label[1]
                            table.add_row(("Canoe " + sectionValueLabelDict[label[0]], data.rescale(label[1])))
                        else:
                            table.add_row(("Canoe " + sectionValueLabelDict[label[0]], f'{value} {label[1]}'))
                        table.add_hline()
def canoeFormulaGenerate(UserInput):
    formula_list =[]
    with doc.create(Subsection('Canoe Detailed Data')):
        doc.append("The Mathematical representation of the Canoe is as follows: ")
        doc.append("\n")

        formulaList = [
            r"CrossSection(x) = Depth\times(\frac{x}{Width})^{CrossSection Shape factor} \label{X}",
                r"width(x) = Width\times(\frac{x}{Length})^{Length to Width Shape factor} \label{Y}",
                r"depth(x) = Depth\times(\frac{x}{Length})^{Length to Depth Shape factor} \label{Z}"]
        for formula in formulaList:
            doc.append(Command("begin", "equation"))
            doc.append(NoEscape(formula))
            doc.append(Command("end", "equation"))

        doc.append("\n")
        doc.append(NoEscape(r"The General Formula for Cross-Section is donated by \eqref{X}"))
        doc.append("\n")
        doc.append(NoEscape(r"The General Formula for Cross-Section's Width at Length x is donated by \eqref{Y}"))
        doc.append("\n")
        doc.append(NoEscape(r"The General Formula for Cross-Section's Depth at Length x is donated by \eqref{Z}"))
        doc.append("\n")

        sectionLabelList = ["Front", "Middle", "Back"] \
            if len(UserInput[0]) == 5 else ["Front", "Back"]
        itemList = ["Length", "Width", "Depth",
                    "CrossSection Shape factor", "Length to Width Shape factor", "Length to Depth Shape factor"]
        for index, label in enumerate(sectionLabelList):
            with doc.create(Subsubsection(label + "Section Mathematical Representation")):
                for formula in formulaList:
                    formula_notation = []
                    for itemIndex, item in reversed(list(enumerate(itemList))):
                        if item in formula:
                            if item == "Width":
                                formula = formula.replace(item, str(round(UserInput[0][f"{index}"][itemIndex]/2, 2)))
                            else:formula = formula.replace(item, str(round(UserInput[0][f"{index}"][itemIndex], 2)))



                    if "\label{X}" in formula:
                        formula = formula.replace("\label{X}", r"\tag{\ref{X}{" + chr(index + 97)+"}}")  # chr(97) = a
                        formula_notation.append(r"\tag{\ref{X}{" + chr(index + 97) + "}}")
                    if "\label{Y}" in formula:
                        formula = formula.replace("\label{Y}", r"\tag{\ref{Y}{" + chr(index + 97)+"}}") # chr(97) = a
                        formula_notation.append(r"\tag{\ref{Y}{" + chr(index + 97)+"}}")
                    if "\label{Z}" in formula:
                        formula = formula.replace("\label{Z}", r"\tag{\ref{Z}{" + chr(index + 97)+"}}")  # chr(97) = a
                        formula_notation.append(r"\tag{\ref{Z}{" + chr(index + 97)+"}}")
                    formula_list.append(formula_notation)

                    doc.append(Command("begin", "equation"))
                    doc.append(NoEscape(formula))
                    doc.append(Command("end", "equation"))
    return formula_list





formula_list = DesignReport(UserInput, CanoeDataDict, CanoeDetailDataDict)
CalculationReprot(UserInput, CanoeDataDict, CanoeDetailDataDict,formula_list)
doc.generate_pdf("test", compiler="pdflatex", clean_tex=False)
